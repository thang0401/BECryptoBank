package com.cryptobank.backend.controller;

import com.cryptobank.backend.entity.Status;
import com.cryptobank.backend.entity.UsdcVndTransaction;
import com.cryptobank.backend.entity.User;
import com.cryptobank.backend.repository.StatusDAO;
import com.cryptobank.backend.repository.UsdcVndTransactionRepository;
import com.cryptobank.backend.repository.UserDAO;
import com.cryptobank.backend.services.BankTransferService2;
import com.cryptobank.backend.services.DebitWalletService;
import com.cryptobank.backend.services.ExchangeRateService;
import com.cryptobank.backend.services.PaymentService;
import com.cryptobank.backend.services.UserService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/payment")
public class PaymentController {
	
	@Autowired
    private BankTransferService2 bankTransferService;
	
	@Autowired
	private PaymentService paymentService;
	
	@Autowired
	private DebitWalletService debitWalletService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private ExchangeRateService exchangeRateService;
	
	@Autowired
	private UserDAO userRepository;
	
	@Autowired 
	private UsdcVndTransactionRepository transactionRepository;
	
	@Autowired
	private StatusDAO statusRepository;

	
    //API n·∫°p ti·ªÅn - Tr·∫£ v·ªÅ m√£ QR ƒë·ªÉ thanh to√°n
    @PostMapping("/deposit")
    public ResponseEntity<Map<String, String>> deposit(
    		// FE ch·ªâ ƒë∆∞a xu·ªëng amount 
            @RequestParam String orderId,
            @RequestParam Double amount,
            @RequestParam String description,
            @RequestParam String returnUrl,
            @RequestParam String cancelUrl) {

        Map<String, String> response = bankTransferService.depositToPayOS(orderId, amount, description, returnUrl, cancelUrl);
        return ResponseEntity.ok(response);
    }

    
    //API r√∫t ti·ªÅn - X·ª≠ l√Ω y√™u c·∫ßu r√∫t ti·ªÅn
    @PostMapping("/withdraw")
    public ResponseEntity<Map<String, String>> withdraw(
            @RequestParam String userId,
            @RequestParam BigDecimal amount,
            @RequestParam String bankAccount,
            @RequestParam String bankCode) {

        Map<String, String> response = bankTransferService.requestWithdraw(userId, amount, bankAccount, bankCode);
        return ResponseEntity.ok(response);
    }
    
    @PostMapping("/transactions/update-status")
    public ResponseEntity<Map<String, String>> updateTransactionStatus(
            @RequestParam String transactionId, 
            @RequestParam String newStatus) {

        Map<String, String> response = bankTransferService.updateTransactionStatus(transactionId, newStatus);
        return ResponseEntity.ok(response);
    }

    
    
    // API Webhook nh·∫≠n ph·∫£n h·ªìi t·ª´ PayOS
    @PostMapping("/webhook/payos")
    public ResponseEntity<String> handlePayOSWebhook(@RequestBody Map<String, Object> payload) {
        String transactionId = (String) payload.get("transaction_id");
        String status = (String) payload.get("status");
        BigDecimal amountVND = BigDecimal.valueOf(Double.parseDouble(payload.get("amount").toString()));
        String userId = (String) payload.get("user_id");

        // üîç T√¨m user trong DB
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + userId));

        // L·∫•y t·ª∑ gi√° USDC/VND hi·ªán t·∫°i
        BigDecimal exchangeRate = BigDecimal.valueOf(exchangeRateService.getUsdcVndRate());
        if (exchangeRate.compareTo(BigDecimal.ZERO) <= 0) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Kh√¥ng th·ªÉ l·∫•y t·ª∑ gi√° USDC/VND");
        }

        // Chuy·ªÉn ƒë·ªïi VND ‚Üí USDC
        BigDecimal amountUSDC = amountVND.divide(exchangeRate, 6, RoundingMode.HALF_UP);

        // L·∫•y tr·∫°ng th√°i "PENDING"
        Status pendingStatus =Optional.ofNullable( statusRepository.findByName("PENDING"))
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i PENDING"));

        // üîπ L∆∞u giao d·ªãch v·ªõi tr·∫°ng th√°i PENDING
        paymentService.saveTransaction(transactionId, user.getId(), amountVND, amountUSDC, exchangeRate, "DEPOSIT", "PENDING");

        return ResponseEntity.ok("Giao d·ªãch ƒëang ch·ªù x√°c nh·∫≠n.");
    }
    

    //api ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i v√† c·∫≠p nh·∫≠t s·ªë d∆∞
    @PutMapping("/transactions/confirm")
    public ResponseEntity<String> confirmTransaction(
            @RequestParam String transactionId, 
            @RequestParam String userId, 
            @RequestParam String newStatus) {

        // üîç T√¨m giao d·ªãch theo ID
        UsdcVndTransaction transaction = transactionRepository.findById(transactionId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi ID: " + transactionId));

        // üîç Ki·ªÉm tra xem giao d·ªãch c√≥ thu·ªôc v·ªÅ user kh√¥ng
        if (!transaction.getDebitWallet().getUser().getId().equals(userId)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Giao d·ªãch kh√¥ng thu·ªôc v·ªÅ user n√†y!");
        }

        // üîç T√¨m Status theo t√™n
        Status status = Optional.ofNullable( statusRepository.findByName(newStatus))
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i: " + newStatus));

        // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i
        transaction.setStatus(status);
        transactionRepository.save(transaction);

        // üîπ N·∫øu tr·∫°ng th√°i m·ªõi l√† "SUCCESS", c·∫≠p nh·∫≠t s·ªë d∆∞
        if ("SUCCESS".equalsIgnoreCase(newStatus)) {
            debitWalletService.updateBalance(userId, transaction.getUsdcAmount());
        }

        return ResponseEntity.ok("Tr·∫°ng th√°i giao d·ªãch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh: " + newStatus);
    }

}
