package com.cryptobank.backend.services;

<<<<<<< HEAD
=======
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

>>>>>>> phong
import com.cryptobank.backend.entity.DebitWallet;
import com.cryptobank.backend.entity.Status;
import com.cryptobank.backend.entity.UsdcVndTransaction;
import com.cryptobank.backend.entity.UserBankAccount;
import com.cryptobank.backend.repository.DebitWalletDAO;
import com.cryptobank.backend.repository.StatusDAO;
import com.cryptobank.backend.repository.UsdcVndTransactionRepository;
import com.cryptobank.backend.repository.UserDAO;
import com.cryptobank.backend.repository.userBankAccountRepository;
<<<<<<< HEAD
import jakarta.transaction.Transactional;
=======

import jakarta.transaction.Transactional;

>>>>>>> phong
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
<<<<<<< HEAD
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
=======
>>>>>>> phong

@Service
public class BankTransferService2 {

    @Value("${payos.base-url}")
    private String payosBaseUrl;

    @Value("${payos.client-id}")
    private String payosClientId;

    @Value("${payos.api-key}")
    private String payosApiKey;
    
	
	@Autowired
	private PaymentService paymentService;
	
	@Autowired
	private DebitWalletService debitWalletService;
	
//	@Autowired
//	private UserService userService;
	
	@Autowired
	private ExchangeRateService exchangeRateService;
	
	@Autowired
	private DebitWalletDAO debitWalletRepository;
	
	@Autowired
	private StatusDAO statusRepository;
	
	@Autowired
	private UserDAO userRepository;
	
	@Autowired 
	private UsdcVndTransactionRepository transactionRepository;
	
	@Autowired
	private userBankAccountRepository userBankAccountRepository;

    private final RestTemplate restTemplate;
    private final UserService userService; // Service ƒë·ªÉ ki·ªÉm tra s·ªë d∆∞ USDC
    
    @Autowired
    private PayOSService payosService;


    public BankTransferService2(RestTemplate restTemplate, UserService userService) {
        this.restTemplate = restTemplate;
        this.userService = userService;
    }

    // 1Ô∏è API n·∫°p ti·ªÅn - Tr·∫£ v·ªÅ m√£ QR
    public Map<String, String> depositToPayOS(String orderId, Double amount, String description, String returnUrl, String cancelUrl) {
        String url = payosBaseUrl + "/v2/payment-requests";

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("orderId", orderId);
        requestBody.put("amount", amount);
        requestBody.put("description", description);
        requestBody.put("returnUrl", returnUrl);
        requestBody.put("cancelUrl", cancelUrl);
        requestBody.put("clientId", payosClientId);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + payosApiKey);

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
        ResponseEntity<Map> response = restTemplate.exchange(url, HttpMethod.POST, entity, Map.class);

        Map<String, String> responseBody = new HashMap<>();
        if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
            String checkoutUrl = (String) response.getBody().get("checkoutUrl");
            responseBody.put("checkoutUrl", checkoutUrl);
            responseBody.put("qrCodeUrl", "https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl=" + checkoutUrl);
        } else {
            responseBody.put("error", "L·ªói khi t·∫°o giao d·ªãch!");
        }
        return responseBody;
    }

    // 2Ô∏è API r√∫t ti·ªÅn - X·ª≠ l√Ω y√™u c·∫ßu r√∫t ti·ªÅn
    @Transactional
    public Map<String, String> requestWithdraw(String userId, BigDecimal usdcAmount, String bankAccount, String bankCode) {
        Map<String, String> responseBody = new HashMap<>();

        // Ki·ªÉm tra s·ªë d∆∞ USDC c·ªßa user
        DebitWallet debitWallet = debitWalletRepository.findByUserId(userId)
        		.stream()
        		.findFirst()
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√≠ c·ªßa user: " + userId));

        if (debitWallet.getBalance().compareTo(usdcAmount) < 0) {
            responseBody.put("error", "S·ªë d∆∞ kh√¥ng ƒë·ªß!");
            return responseBody;
        }

        // L·∫•y t·ª∑ gi√° USDC/VND
        BigDecimal exchangeRate = BigDecimal.valueOf(exchangeRateService.getUsdcVndRate());
        if (exchangeRate.compareTo(BigDecimal.ZERO) <= 0) {
            responseBody.put("error", "Kh√¥ng th·ªÉ l·∫•y t·ª∑ gi√° USDC/VND!");
            return responseBody;
        }

        // Chuy·ªÉn ƒë·ªïi USDC ‚Üí VND
        BigDecimal vndAmount = usdcAmount.multiply(exchangeRate);

        // L·∫•y tr·∫°ng th√°i "PENDING"
        Status pendingStatus = Optional.ofNullable(statusRepository.findByName("PENDING"))
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i PENDING"));

        // T·∫°o giao d·ªãch r√∫t ti·ªÅn (ch·ªù duy·ªát)
        UsdcVndTransaction transaction = new UsdcVndTransaction();
        transaction.setDebitWallet(debitWallet);
        transaction.setVndAmount(vndAmount);
        transaction.setUsdcAmount(usdcAmount);
        transaction.setExchangeRate(exchangeRate);
        transaction.setType("WITHDRAW");
        transaction.setStatus(pendingStatus);
        transactionRepository.save(transaction);

        responseBody.put("message", "Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i, ƒëang ch·ªù x√©t duy·ªát!");
        return responseBody;
    }
    
    
    @Transactional
    public Map<String, String> updateTransactionStatus(String transactionId, String newStatus, Long bankAccountId) {
        Map<String, String> responseBody = new HashMap<>();

        // üîç T√¨m giao d·ªãch
        UsdcVndTransaction transaction = transactionRepository.findById(transactionId)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi ID: " + transactionId));

        // üîç L·∫•y tr·∫°ng th√°i m·ªõi t·ª´ DB
        Status status = Optional.ofNullable(statusRepository.findByName(newStatus))
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i: " + newStatus));

        // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch
        transaction.setStatus(status);
        transactionRepository.save(transaction);

        // üî• N·∫øu giao d·ªãch ƒë∆∞·ª£c duy·ªát, th·ª±c hi·ªán r√∫t ti·ªÅn
        if ("SUCCESS".equals(newStatus)) {
            DebitWallet debitWallet = transaction.getDebitWallet();
            BigDecimal usdcAmount = transaction.getUsdcAmount();

            if (debitWallet.getBalance().compareTo(usdcAmount) < 0) {
                responseBody.put("error", "S·ªë d∆∞ kh√¥ng ƒë·ªß!");
                return responseBody;
            }

            // üîç N·∫øu kh√¥ng ch·ªçn bankAccountId, l·∫•y t√†i kho·∫£n ng√¢n h√†ng m·ªõi nh·∫•t
            UserBankAccount bankAccount = userBankAccountRepository.findById(bankAccountId)
<<<<<<< HEAD
            	    .orElseGet(() -> userBankAccountRepository.findFirstByUserIdOrderByModifiedAtDescCreatedAtDesc(
=======
            	    .orElseGet(() -> userBankAccountRepository.findFirstByUserIdOrderByUpdatedAtDescCreatedAtDesc(
>>>>>>> phong
            	        debitWallet.getUser().getId()
            	    ).orElseThrow(() -> new RuntimeException("Ng∆∞·ªùi d√πng ch∆∞a c√≥ t√†i kho·∫£n ng√¢n h√†ng n√†o!")));


            // üí∞ Tr·ª´ s·ªë d∆∞ USDC trong v√≠
            debitWallet.setBalance(debitWallet.getBalance().subtract(usdcAmount));
            debitWalletRepository.save(debitWallet);

            // üí≥ G·ª≠i y√™u c·∫ßu r√∫t ti·ªÅn ƒë·∫øn PayOS
            Map<String, String> payosResponse = payosService.withdraw(
                transaction.getVndAmount(), 
                bankAccount.getAccountNumber(), 
                bankAccount.getBankCode()
            );

            if (payosResponse.containsKey("error")) {
                responseBody.put("error", "L·ªói khi g·ª≠i y√™u c·∫ßu r√∫t ti·ªÅn: " + payosResponse.get("error"));
                return responseBody;
            }

            responseBody.put("message", "Giao d·ªãch ƒë√£ ƒë∆∞·ª£c duy·ªát v√† ti·ªÅn ƒëang ƒë∆∞·ª£c chuy·ªÉn!");
        } else if ("FAILED".equals(newStatus)) {
            responseBody.put("message", "Giao d·ªãch ƒë√£ b·ªã t·ª´ ch·ªëi!");
        }

        return responseBody;
    }




}
