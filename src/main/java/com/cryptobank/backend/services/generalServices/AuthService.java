package com.cryptobank.backend.services.generalServices;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.cryptobank.backend.entity.DeviceInfo;
import com.cryptobank.backend.entity.User;
import com.cryptobank.backend.repository.DeviceInforDAO;
import com.cryptobank.backend.repository.UserDAO;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import ua_parser.Client;
import ua_parser.Parser;

@Service
public class AuthService {
    @Autowired
    private UserDAO userRepository;

    @Autowired
    private DeviceInforDAO deviceInfoRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;
    
    private EmailDeviceService emailDeviceService;

    public Boolean login(String email, String password, HttpServletRequest request, HttpSession session) {
        try {
            User user = userRepository.findByEmail(email).orElseThrow();

            // L·∫•y User-Agent t·ª´ request
            String userAgent = request.getHeader("User-Agent");
            Parser parser = new Parser(); // Kh·ªüi t·∫°o UAParser
            Client client = parser.parse(userAgent);

            // L·∫•y th√¥ng tin h·ªá ƒëi·ªÅu h√†nh, tr√¨nh duy·ªát v√† thi·∫øt b·ªã
            String deviceName = client.device.family;
            String os = client.os.family + " " + client.os.major;
            String browser = client.userAgent.family + " " + client.userAgent.major;
            String ipAddress = request.getRemoteAddr();
            String sessionId = session.getId();

            // Ki·ªÉm tra xem thi·∫øt b·ªã ƒë√£ t·ªìn t·∫°i hay ch∆∞a
            Optional<DeviceInfo> existingDevice = deviceInfoRepository.findByDeviceIdAndUser(sessionId, user);

            if (existingDevice.isPresent()) {
                // N·∫øu thi·∫øt b·ªã ƒë√£ t·ªìn t·∫°i, ch·ªâ c·∫≠p nh·∫≠t ng√†y truy c·∫≠p
                DeviceInfo device = existingDevice.get();
                device.setLastLogin(LocalDateTime.now());
                deviceInfoRepository.save(device);
            } else {
                // N·∫øu l√† thi·∫øt b·ªã m·ªõi, th√™m m·ªõi v√†o DB
                DeviceInfo newDevice = new DeviceInfo();
                newDevice.setDeviceId(sessionId);
                newDevice.setDeviceName(deviceName);
                newDevice.setOs(os);
                newDevice.setBrowser(browser);
                newDevice.setIpAddress(ipAddress);
                newDevice.setLastLogin(LocalDateTime.now());
                newDevice.setUser(user);

                deviceInfoRepository.save(newDevice);

                //  G·ª≠i c·∫£nh b√°o email v√¨ l√† thi·∫øt b·ªã m·ªõi
                sendNewDeviceAlert(user, newDevice);
            }
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    private void sendNewDeviceAlert(User user, DeviceInfo device) {
        String subject = "C·∫£nh b√°o ƒëƒÉng nh·∫≠p t·ª´ thi·∫øt b·ªã m·ªõi!";
        String message = String.format(
            "Xin ch√†o %s,\n\n" +
            "Ch√∫ng t√¥i ph√°t hi·ªán t√†i kho·∫£n c·ªßa b·∫°n v·ª´a ƒëƒÉng nh·∫≠p t·ª´ m·ªôt thi·∫øt b·ªã m·ªõi:\n\n" +
            "üîπ Thi·∫øt b·ªã: %s\n" +
            "üîπ H·ªá ƒëi·ªÅu h√†nh: %s\n" +
            "üîπ Tr√¨nh duy·ªát: %s\n" +
            "üîπ ƒê·ªãa ch·ªâ IP: %s\n" +
            "üîπ Th·ªùi gian ƒëƒÉng nh·∫≠p: %s\n\n" +
            "N·∫øu ƒë√¢y kh√¥ng ph·∫£i b·∫°n, vui l√≤ng ƒë·ªïi m·∫≠t kh·∫©u ngay l·∫≠p t·ª©c ho·∫∑c li√™n h·ªá h·ªó tr·ª£!",
            user.getFirstName()+" "+user.getLastName(),
            device.getDeviceName(),
            device.getOs(),
            device.getBrowser(),
            device.getIpAddress(),
            device.getLastLogin().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
        );

        // G·ªçi service g·ª≠i email
        emailDeviceService.sendEmail(user.getEmail(), subject, message);
    }


    public void logout(HttpSession session) {
        session.invalidate();
    }
}
