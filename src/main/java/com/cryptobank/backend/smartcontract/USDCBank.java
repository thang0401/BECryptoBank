package com.cryptobank.backend.smartcontract;


import io.reactivex.Flowable;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.2.
 */
@SuppressWarnings("rawtypes")
public class USDCBank extends Contract {
    public static final String BINARY = "608060405234801561000f575f80fd5b506040516131a53803806131a583398181016040528101906100319190610182565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361009f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009690610207565b60405180910390fd5b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610225565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61015182610128565b9050919050565b61016181610147565b811461016b575f80fd5b50565b5f8151905061017c81610158565b92915050565b5f6020828403121561019757610196610124565b5b5f6101a48482850161016e565b91505092915050565b5f82825260208201905092915050565b7f496e76616c6964205553444320616464726573730000000000000000000000005f82015250565b5f6101f16014836101ad565b91506101fc826101bd565b602082019050919050565b5f6020820190508181035f83015261021e816101e5565b9050919050565b612f73806102325f395ff3fe608060405234801561000f575f80fd5b50600436106100cd575f3560e01c8063d20cf0e81161008a578063e2842d7911610064578063e2842d791461022d578063e3557c1a1461024b578063e3abc2bc14610267578063f1215d251461029b576100cd565b8063d20cf0e8146101ad578063d7ff0714146101dd578063dc048cf214610211576100cd565b806311eac855146100d1578063422ff875146100ef57806348430d791461010d5780638da5cb5b14610129578063a2bdedf414610147578063a87430ba1461017a575b5f80fd5b6100d96102b7565b6040516100e69190611e7d565b60405180910390f35b6100f76102dc565b6040516101049190612073565b60405180910390f35b610127600480360381019061012291906120f8565b61054d565b005b61013161084a565b60405161013e9190612145565b60405180910390f35b610161600480360381019061015c919061215e565b61086d565b60405161017194939291906121eb565b60405180910390f35b610194600480360381019061018f919061223c565b6109df565b6040516101a494939291906121eb565b60405180910390f35b6101c760048036038101906101c2919061223c565b610b42565b6040516101d49190612073565b60405180910390f35b6101f760048036038101906101f2919061215e565b610d63565b604051610208959493929190612276565b60405180910390f35b61022b60048036038101906102269190612401565b610ecf565b005b610235611331565b604051610242919061258c565b60405180910390f35b610265600480360381019061026091906125d6565b6115a8565b005b610281600480360381019061027c919061265e565b611826565b604051610292959493929190612276565b60405180910390f35b6102b560048036038101906102b09190612401565b61199d565b005b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60605f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610362906126e6565b60405180910390fd5b6005805480602002602001604051908101604052809291908181526020015f905b82821015610544578382905f5260205f2090600502016040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201805461041b90612731565b80601f016020809104026020016040519081016040528092919081815260200182805461044790612731565b80156104925780601f1061046957610100808354040283529160200191610492565b820191905f5260205f20905b81548152906001019060200180831161047557829003601f168201915b505050505081526020016003820180546104ab90612731565b80601f01602080910402602001604051908101604052809291908181526020018280546104d790612731565b80156105225780601f106104f957610100808354040283529160200191610522565b820191905f5260205f20905b81548152906001019060200180831161050557829003601f168201915b505050505081526020016004820154815250508152602001906001019061038c565b50505050905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d1906126e6565b60405180910390fd5b5f821161061c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610613906127ab565b60405180910390fd5b8160015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106779190612145565b602060405180830381865afa158015610692573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106b691906127dd565b10156106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee90612852565b60405180910390fd5b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83856040518363ffffffff1660e01b8152600401610754929190612870565b6020604051808303815f875af1158015610770573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061079491906128ab565b9050806107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd90612920565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f898cf6aa90ee86f2c4613b7018a323a487e1ba40d456a7cb116718da40db855d844260405161083d92919061293e565b60405180910390a2505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811061087c575f80fd5b905f5260205f2090600402015f91509050805f01805461089b90612731565b80601f01602080910402602001604051908101604052809291908181526020018280546108c790612731565b80156109125780601f106108e957610100808354040283529160200191610912565b820191905f5260205f20905b8154815290600101906020018083116108f557829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201805461094c90612731565b80601f016020809104026020016040519081016040528092919081815260200182805461097890612731565b80156109c35780601f1061099a576101008083540402835291602001916109c3565b820191905f5260205f20905b8154815290600101906020018083116109a657829003601f168201915b505050505090806003015f9054906101000a900460ff16905084565b6002602052805f5260405f205f91509050805f0180546109fe90612731565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2a90612731565b8015610a755780601f10610a4c57610100808354040283529160200191610a75565b820191905f5260205f20905b815481529060010190602001808311610a5857829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054610aaf90612731565b80601f0160208091040260200160405190810160405280929190818152602001828054610adb90612731565b8015610b265780601f10610afd57610100808354040283529160200191610b26565b820191905f5260205f20905b815481529060010190602001808311610b0957829003601f168201915b505050505090806003015f9054906101000a900460ff16905084565b606060035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610d58578382905f5260205f2090600502016040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282018054610c2f90612731565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5b90612731565b8015610ca65780601f10610c7d57610100808354040283529160200191610ca6565b820191905f5260205f20905b815481529060010190602001808311610c8957829003601f168201915b50505050508152602001600382018054610cbf90612731565b80601f0160208091040260200160405190810160405280929190818152602001828054610ceb90612731565b8015610d365780601f10610d0d57610100808354040283529160200191610d36565b820191905f5260205f20905b815481529060010190602001808311610d1957829003601f168201915b5050505050815260200160048201548152505081526020019060010190610ba0565b505050509050919050565b60058181548110610d72575f80fd5b905f5260205f2090600502015f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054610dbc90612731565b80601f0160208091040260200160405190810160405280929190818152602001828054610de890612731565b8015610e335780601f10610e0a57610100808354040283529160200191610e33565b820191905f5260205f20905b815481529060010190602001808311610e1657829003601f168201915b505050505090806003018054610e4890612731565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7490612731565b8015610ebf5780601f10610e9657610100808354040283529160200191610ebf565b820191905f5260205f20905b815481529060010190602001808311610ea257829003601f168201915b5050505050908060040154905085565b5f8211610f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f08906127ab565b60405180910390fd5b8160015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f6c9190612145565b602060405180830381865afa158015610f87573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fab91906127dd565b1015610fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe3906129af565b60405180910390fd5b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401611049929190612870565b6020604051808303815f875af1158015611065573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061108991906128ab565b9050806110cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c290612a17565b60405180910390fd5b5f6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020016040518060400160405280600881526020017f5769746864726177000000000000000000000000000000000000000000000000815250815260200142815250905060035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081908060018154018082558091505060019003905f5260205f2090600502015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190816112079190612bc9565b50606082015181600301908161121d9190612bc9565b50608082015181600401555050600581908060018154018082558091505060019003905f5260205f2090600502015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190816112b69190612bc9565b5060608201518160030190816112cc9190612bc9565b506080820151816004015550503373ffffffffffffffffffffffffffffffffffffffff167f312203f121b8d9595fcf6196eec5f352fe298f518a2e2a96cc0ac62d900b8b0085854260405161132393929190612c98565b60405180910390a250505050565b60605f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b7906126e6565b60405180910390fd5b6004805480602002602001604051908101604052809291908181526020015f905b8282101561159f578382905f5260205f2090600402016040518060800160405290815f8201805461141190612731565b80601f016020809104026020016040519081016040528092919081815260200182805461143d90612731565b80156114885780601f1061145f57610100808354040283529160200191611488565b820191905f5260205f20905b81548152906001019060200180831161146b57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546114f690612731565b80601f016020809104026020016040519081016040528092919081815260200182805461152290612731565b801561156d5780601f106115445761010080835404028352916020019161156d565b820191905f5260205f20905b81548152906001019060200180831161155057829003601f168201915b50505050508152602001600382015f9054906101000a900460ff161515151581525050815260200190600101906113e1565b50505050905090565b60405180608001604052808481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182151581525060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f0190816116319190612bc9565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908161168d9190612bc9565b506060820151816003015f6101000a81548160ff021916908315150217905550905050600460025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20908060018154018082558091505060019003905f5260205f2090600402015f909190919091505f8201815f0190816117279190612ce9565b50600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816117a19190612ce9565b50600382015f9054906101000a900460ff16816003015f6101000a81548160ff02191690831515021790555050503373ffffffffffffffffffffffffffffffffffffffff167f3417002428ea948bdfd47a86cd115c962a2c7efcb058c7277ec2de6b8d5da6e584848460405161181993929190612dce565b60405180910390a2505050565b6003602052815f5260405f20818154811061183f575f80fd5b905f5260205f2090600502015f9150915050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201805461188a90612731565b80601f01602080910402602001604051908101604052809291908181526020018280546118b690612731565b80156119015780601f106118d857610100808354040283529160200191611901565b820191905f5260205f20905b8154815290600101906020018083116118e457829003601f168201915b50505050509080600301805461191690612731565b80601f016020809104026020016040519081016040528092919081815260200182805461194290612731565b801561198d5780601f106119645761010080835404028352916020019161198d565b820191905f5260205f20905b81548152906001019060200180831161197057829003601f168201915b5050505050908060040154905085565b5f82116119df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d6906127ab565b60405180910390fd5b8160015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611a3c929190612e11565b602060405180830381865afa158015611a57573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a7b91906127dd565b1015611abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab390612e82565b60405180910390fd5b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611b1b93929190612ea0565b6020604051808303815f875af1158015611b37573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b5b91906128ab565b905080611b9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9490612f1f565b60405180910390fd5b5f6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020016040518060400160405280600781526020017f4465706f73697400000000000000000000000000000000000000000000000000815250815260200142815250905060035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081908060018154018082558091505060019003905f5260205f2090600502015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019081611cd99190612bc9565b506060820151816003019081611cef9190612bc9565b50608082015181600401555050600581908060018154018082558091505060019003905f5260205f2090600502015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019081611d889190612bc9565b506060820151816003019081611d9e9190612bc9565b506080820151816004015550503373ffffffffffffffffffffffffffffffffffffffff167f2157592e75ae7c48a11728aef822bc883f3eb4b0929956be2a5e4250f5622aac858542604051611df593929190612c98565b60405180910390a250505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f611e45611e40611e3b84611e03565b611e22565b611e03565b9050919050565b5f611e5682611e2b565b9050919050565b5f611e6782611e4c565b9050919050565b611e7781611e5d565b82525050565b5f602082019050611e905f830184611e6e565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f611ec982611e03565b9050919050565b611ed981611ebf565b82525050565b5f819050919050565b611ef181611edf565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611f3982611ef7565b611f438185611f01565b9350611f53818560208601611f11565b611f5c81611f1f565b840191505092915050565b5f60a083015f830151611f7c5f860182611ed0565b506020830151611f8f6020860182611ee8565b5060408301518482036040860152611fa78282611f2f565b91505060608301518482036060860152611fc18282611f2f565b9150506080830151611fd66080860182611ee8565b508091505092915050565b5f611fec8383611f67565b905092915050565b5f602082019050919050565b5f61200a82611e96565b6120148185611ea0565b93508360208202850161202685611eb0565b805f5b8581101561206157848403895281516120428582611fe1565b945061204d83611ff4565b925060208a01995050600181019050612029565b50829750879550505050505092915050565b5f6020820190508181035f83015261208b8184612000565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b6120ad81611edf565b81146120b7575f80fd5b50565b5f813590506120c8816120a4565b92915050565b6120d781611ebf565b81146120e1575f80fd5b50565b5f813590506120f2816120ce565b92915050565b5f806040838503121561210e5761210d61209c565b5b5f61211b858286016120ba565b925050602061212c858286016120e4565b9150509250929050565b61213f81611ebf565b82525050565b5f6020820190506121585f830184612136565b92915050565b5f602082840312156121735761217261209c565b5b5f612180848285016120ba565b91505092915050565b5f82825260208201905092915050565b5f6121a382611ef7565b6121ad8185612189565b93506121bd818560208601611f11565b6121c681611f1f565b840191505092915050565b5f8115159050919050565b6121e5816121d1565b82525050565b5f6080820190508181035f8301526122038187612199565b90506122126020830186612136565b81810360408301526122248185612199565b905061223360608301846121dc565b95945050505050565b5f602082840312156122515761225061209c565b5b5f61225e848285016120e4565b91505092915050565b61227081611edf565b82525050565b5f60a0820190506122895f830188612136565b6122966020830187612267565b81810360408301526122a88186612199565b905081810360608301526122bc8185612199565b90506122cb6080830184612267565b9695505050505050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61231382611f1f565b810181811067ffffffffffffffff82111715612332576123316122dd565b5b80604052505050565b5f612344612093565b9050612350828261230a565b919050565b5f67ffffffffffffffff82111561236f5761236e6122dd565b5b61237882611f1f565b9050602081019050919050565b828183375f83830152505050565b5f6123a56123a084612355565b61233b565b9050828152602081018484840111156123c1576123c06122d9565b5b6123cc848285612385565b509392505050565b5f82601f8301126123e8576123e76122d5565b5b81356123f8848260208601612393565b91505092915050565b5f80604083850312156124175761241661209c565b5b5f612424858286016120ba565b925050602083013567ffffffffffffffff811115612445576124446120a0565b5b612451858286016123d4565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61248d816121d1565b82525050565b5f608083015f8301518482035f8601526124ad8282611f2f565b91505060208301516124c26020860182611ed0565b50604083015184820360408601526124da8282611f2f565b91505060608301516124ef6060860182612484565b508091505092915050565b5f6125058383612493565b905092915050565b5f602082019050919050565b5f6125238261245b565b61252d8185612465565b93508360208202850161253f85612475565b805f5b8581101561257a578484038952815161255b85826124fa565b94506125668361250d565b925060208a01995050600181019050612542565b50829750879550505050505092915050565b5f6020820190508181035f8301526125a48184612519565b905092915050565b6125b5816121d1565b81146125bf575f80fd5b50565b5f813590506125d0816125ac565b92915050565b5f805f606084860312156125ed576125ec61209c565b5b5f84013567ffffffffffffffff81111561260a576126096120a0565b5b612616868287016123d4565b935050602084013567ffffffffffffffff811115612637576126366120a0565b5b612643868287016123d4565b9250506040612654868287016125c2565b9150509250925092565b5f80604083850312156126745761267361209c565b5b5f612681858286016120e4565b9250506020612692858286016120ba565b9150509250929050565b7f4e6f7420617574686f72697a65640000000000000000000000000000000000005f82015250565b5f6126d0600e83612189565b91506126db8261269c565b602082019050919050565b5f6020820190508181035f8301526126fd816126c4565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061274857607f821691505b60208210810361275b5761275a612704565b5b50919050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f5f82015250565b5f612795602083612189565b91506127a082612761565b602082019050919050565b5f6020820190508181035f8301526127c281612789565b9050919050565b5f815190506127d7816120a4565b92915050565b5f602082840312156127f2576127f161209c565b5b5f6127ff848285016127c9565b91505092915050565b7f496e73756666696369656e742066756e647300000000000000000000000000005f82015250565b5f61283c601283612189565b915061284782612808565b602082019050919050565b5f6020820190508181035f83015261286981612830565b9050919050565b5f6040820190506128835f830185612136565b6128906020830184612267565b9392505050565b5f815190506128a5816125ac565b92915050565b5f602082840312156128c0576128bf61209c565b5b5f6128cd84828501612897565b91505092915050565b7f5472616e73666572206661696c656400000000000000000000000000000000005f82015250565b5f61290a600f83612189565b9150612915826128d6565b602082019050919050565b5f6020820190508181035f830152612937816128fe565b9050919050565b5f6040820190506129515f830185612267565b61295e6020830184612267565b9392505050565b7f496e73756666696369656e742066756e647320696e20636f6e747261637400005f82015250565b5f612999601e83612189565b91506129a482612965565b602082019050919050565b5f6020820190508181035f8301526129c68161298d565b9050919050565b7f5769746864726177206661696c656400000000000000000000000000000000005f82015250565b5f612a01600f83612189565b9150612a0c826129cd565b602082019050919050565b5f6020820190508181035f830152612a2e816129f5565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612a917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a56565b612a9b8683612a56565b95508019841693508086168417925050509392505050565b5f612acd612ac8612ac384611edf565b611e22565b611edf565b9050919050565b5f819050919050565b612ae683612ab3565b612afa612af282612ad4565b848454612a62565b825550505050565b5f90565b612b0e612b02565b612b19818484612add565b505050565b5b81811015612b3c57612b315f82612b06565b600181019050612b1f565b5050565b601f821115612b8157612b5281612a35565b612b5b84612a47565b81016020851015612b6a578190505b612b7e612b7685612a47565b830182612b1e565b50505b505050565b5f82821c905092915050565b5f612ba15f1984600802612b86565b1980831691505092915050565b5f612bb98383612b92565b9150826002028217905092915050565b612bd282611ef7565b67ffffffffffffffff811115612beb57612bea6122dd565b5b612bf58254612731565b612c00828285612b40565b5f60209050601f831160018114612c31575f8415612c1f578287015190505b612c298582612bae565b865550612c90565b601f198416612c3f86612a35565b5f5b82811015612c6657848901518255600182019150602085019450602081019050612c41565b86831015612c835784890151612c7f601f891682612b92565b8355505b6001600288020188555050505b505050505050565b5f606082019050612cab5f830186612267565b8181036020830152612cbd8185612199565b9050612ccc6040830184612267565b949350505050565b5f81549050612ce281612731565b9050919050565b818103612cf7575050612dcc565b612d0082612cd4565b67ffffffffffffffff811115612d1957612d186122dd565b5b612d238254612731565b612d2e828285612b40565b5f601f831160018114612d5b575f8415612d49578287015490505b612d538582612bae565b865550612dc5565b601f198416612d6987612a35565b9650612d7486612a35565b5f5b82811015612d9b57848901548255600182019150600185019450602081019050612d76565b86831015612db85784890154612db4601f891682612b92565b8355505b6001600288020188555050505b5050505050505b565b5f6060820190508181035f830152612de68186612199565b90508181036020830152612dfa8185612199565b9050612e0960408301846121dc565b949350505050565b5f604082019050612e245f830185612136565b612e316020830184612136565b9392505050565b7f5553444320616c6c6f77616e636520746f6f206c6f77000000000000000000005f82015250565b5f612e6c601683612189565b9150612e7782612e38565b602082019050919050565b5f6020820190508181035f830152612e9981612e60565b9050919050565b5f606082019050612eb35f830186612136565b612ec06020830185612136565b612ecd6040830184612267565b949350505050565b7f4465706f736974206661696c65640000000000000000000000000000000000005f82015250565b5f612f09600e83612189565b9150612f1482612ed5565b602082019050919050565b5f6020820190508181035f830152612f3681612efd565b905091905056fea2646970667358221220f4429674888cca9129a66a096c2ae17442a74f52e922bfc5d0a5a6c5aeaa1f7364736f6c634300081a0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_ALLTRANSACTIONS = "allTransactions";

    public static final String FUNC_ALLUSERS = "allUsers";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_GETALLTRANSACTIONDEBITHISTORY = "getAllTransactionDebitHistory";

    public static final String FUNC_GETALLUSERS = "getAllUsers";

    public static final String FUNC_GETTRANSACTIONHISTORY = "getTransactionHistory";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_TRANSACTIONHISTORY = "transactionHistory";

    public static final String FUNC_TRANSFERFUNDSTOBANK = "transferFundsToBank";

    public static final String FUNC_UPDATEUSER = "updateUser";

    public static final String FUNC_USDCTOKEN = "usdcToken";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event DEPOSITED_EVENT = new Event("Deposited",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDSTRANSFERREDTOBANK_EVENT = new Event("FundsTransferredToBank",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERUPDATED_EVENT = new Event("UserUpdated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event WITHDRAWN_EVENT = new Event("Withdrawn",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected USDCBank(String contractAddress, Web3j web3j, Credentials credentials,
                       BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected USDCBank(String contractAddress, Web3j web3j, Credentials credentials,
                       ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected USDCBank(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                       BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected USDCBank(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                       ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner),
                        new org.web3j.abi.datatypes.Address(160, spender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String recipient, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String sender, String recipient,
                                                               BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender),
                        new org.web3j.abi.datatypes.Address(160, recipient),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<DepositedEventResponse> getDepositedEvents(TransactionReceipt transactionReceipt) {
        List<DepositedEventResponse> responses = new ArrayList<>();

        // Loop through all logs in the transaction receipt
        for (Log log : transactionReceipt.getLogs()) {
            // Extract event values from the log
            Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSITED_EVENT, log);

            if (eventValues != null) {
                DepositedEventResponse typedResponse = new DepositedEventResponse();
                typedResponse.log = log; // Store log info
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.debitAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.createdAt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                responses.add(typedResponse);
            }
        }
        return responses;
    }



    public static DepositedEventResponse getDepositedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSITED_EVENT, log);
        DepositedEventResponse typedResponse = new DepositedEventResponse();
        typedResponse.log = log;
        typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.debitAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.createdAt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<DepositedEventResponse> depositedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDepositedEventFromLog(log));
    }

    public Flowable<DepositedEventResponse> depositedEventFlowable(DefaultBlockParameter startBlock,
                                                                   DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITED_EVENT));
        return depositedEventFlowable(filter);
    }

    public static List<FundsTransferredToBankEventResponse> getFundsTransferredToBankEvents(TransactionReceipt transactionReceipt) {
        List<FundsTransferredToBankEventResponse> responses = new ArrayList<>();

        // Loop through all logs in the transaction receipt
        for (Log log : transactionReceipt.getLogs()) {
            // Extract event values from the log
            Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(FUNDSTRANSFERREDTOBANK_EVENT, log);

            if (eventValues != null) {
                FundsTransferredToBankEventResponse typedResponse = new FundsTransferredToBankEventResponse();
                typedResponse.log = log; // Store log info
                typedResponse.admin = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.createdAt = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                responses.add(typedResponse);
            }
        }
        return responses;
    }


    public static FundsTransferredToBankEventResponse getFundsTransferredToBankEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(FUNDSTRANSFERREDTOBANK_EVENT, log);
        FundsTransferredToBankEventResponse typedResponse = new FundsTransferredToBankEventResponse();
        typedResponse.log = log;
        typedResponse.admin = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.createdAt = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<FundsTransferredToBankEventResponse> fundsTransferredToBankEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getFundsTransferredToBankEventFromLog(log));
    }

    public Flowable<FundsTransferredToBankEventResponse> fundsTransferredToBankEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDSTRANSFERREDTOBANK_EVENT));
        return fundsTransferredToBankEventFlowable(filter);
    }

    public static List<UserUpdatedEventResponse> getUserUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<UserUpdatedEventResponse> responses = new ArrayList<>();

        // Loop through all logs in the transaction receipt
        for (Log log : transactionReceipt.getLogs()) {
            // Extract event values from the log
            Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USERUPDATED_EVENT, log);

            if (eventValues != null) {
                UserUpdatedEventResponse typedResponse = new UserUpdatedEventResponse();
                typedResponse.log = log; // Store log info
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.email = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.isKYCVerified = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
                responses.add(typedResponse);
            }
        }
        return responses;
    }


    public static UserUpdatedEventResponse getUserUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USERUPDATED_EVENT, log);
        UserUpdatedEventResponse typedResponse = new UserUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.email = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.isKYCVerified = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<UserUpdatedEventResponse> userUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserUpdatedEventFromLog(log));
    }

    public Flowable<UserUpdatedEventResponse> userUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERUPDATED_EVENT));
        return userUpdatedEventFlowable(filter);
    }

    public static List<WithdrawnEventResponse> getWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<WithdrawnEventResponse> responses = new ArrayList<>();

        // Loop through all logs in the transaction receipt
        for (Log log : transactionReceipt.getLogs()) {
            // Extract event values from the log
            Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWN_EVENT, log);

            if (eventValues != null) {
                WithdrawnEventResponse typedResponse = new WithdrawnEventResponse();
                typedResponse.log = log; // Store log info
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.debitAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.createdAt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                responses.add(typedResponse);
            }
        }
        return responses;
    }


    public static WithdrawnEventResponse getWithdrawnEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWN_EVENT, log);
        WithdrawnEventResponse typedResponse = new WithdrawnEventResponse();
        typedResponse.log = log;
        typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.debitAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.createdAt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawnEventResponse> withdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawnEventFromLog(log));
    }

    public Flowable<WithdrawnEventResponse> withdrawnEventFlowable(DefaultBlockParameter startBlock,
                                                                   DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWN_EVENT));
        return withdrawnEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple5<String, BigInteger, String, String, BigInteger>> allTransactions(
            BigInteger param0) {
        final Function function = new Function(FUNC_ALLTRANSACTIONS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<String, BigInteger, String, String, BigInteger>>(function,
                new Callable<Tuple5<String, BigInteger, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, String, String, BigInteger> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, String, String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<String, String, String, Boolean>> allUsers(BigInteger param0) {
        final Function function = new Function(FUNC_ALLUSERS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, String, Boolean>>(function,
                new Callable<Tuple4<String, String, String, Boolean>>() {
                    @Override
                    public Tuple4<String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, Boolean>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(BigInteger amount, String debitAccount) {
        final Function function = new Function(
                FUNC_DEPOSIT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.Utf8String(debitAccount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllTransactionDebitHistory() {
        final Function function = new Function(FUNC_GETALLTRANSACTIONDEBITHISTORY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Transaction>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAllUsers() {
        final Function function = new Function(FUNC_GETALLUSERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getTransactionHistory(String user) {
        final Function function = new Function(FUNC_GETTRANSACTIONHISTORY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Transaction>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<String, BigInteger, String, String, BigInteger>> transactionHistory(
            String param0, BigInteger param1) {
        final Function function = new Function(FUNC_TRANSACTIONHISTORY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0),
                        new org.web3j.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<String, BigInteger, String, String, BigInteger>>(function,
                new Callable<Tuple5<String, BigInteger, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, String, String, BigInteger> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, String, String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transferFundsToBank(BigInteger amount,
                                                                      String bankWallet) {
        final Function function = new Function(
                FUNC_TRANSFERFUNDSTOBANK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.Address(160, bankWallet)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateUser(String _name, String _email,
                                                             Boolean _isKYCVerified) {
        final Function function = new Function(
                FUNC_UPDATEUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_email),
                        new org.web3j.abi.datatypes.Bool(_isKYCVerified)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> usdcToken() {
        final Function function = new Function(FUNC_USDCTOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<String, String, String, Boolean>> users(String param0) {
        final Function function = new Function(FUNC_USERS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, String, Boolean>>(function,
                new Callable<Tuple4<String, String, String, Boolean>>() {
                    @Override
                    public Tuple4<String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, Boolean>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigDecimal amount, String debitAccount) {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount.toBigIntegerExact())
                        ,
                        new org.web3j.abi.datatypes.Utf8String(debitAccount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static USDCBank load(String contractAddress, Web3j web3j, Credentials credentials,
                                BigInteger gasPrice, BigInteger gasLimit) {
        return new USDCBank(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static USDCBank load(String contractAddress, Web3j web3j,
                                TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new USDCBank(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static USDCBank load(String contractAddress, Web3j web3j, Credentials credentials,
                                ContractGasProvider contractGasProvider) {
        return new USDCBank(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static USDCBank load(String contractAddress, Web3j web3j,
                                TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new USDCBank(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<USDCBank> deploy(Web3j web3j, Credentials credentials,
                                              ContractGasProvider contractGasProvider, String _usdcToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _usdcToken)));
        return deployRemoteCall(USDCBank.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<USDCBank> deploy(Web3j web3j, TransactionManager transactionManager,
                                              ContractGasProvider contractGasProvider, String _usdcToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _usdcToken)));
        return deployRemoteCall(USDCBank.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<USDCBank> deploy(Web3j web3j, Credentials credentials,
                                              BigInteger gasPrice, BigInteger gasLimit, String _usdcToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _usdcToken)));
        return deployRemoteCall(USDCBank.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<USDCBank> deploy(Web3j web3j, TransactionManager transactionManager,
                                              BigInteger gasPrice, BigInteger gasLimit, String _usdcToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _usdcToken)));
        return deployRemoteCall(USDCBank.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

//    public static void linkLibraries(List<Contract.LinkReference> references) {
//        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
//    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Transaction extends DynamicStruct {
        public String userWallet;

        public BigInteger amount;

        public String debitAccount;

        public String txnType;

        public BigInteger createdAt;

        public Transaction(String userWallet, BigInteger amount, String debitAccount,
                           String txnType, BigInteger createdAt) {
            super(new org.web3j.abi.datatypes.Address(160, userWallet),
                    new org.web3j.abi.datatypes.generated.Uint256(amount),
                    new org.web3j.abi.datatypes.Utf8String(debitAccount),
                    new org.web3j.abi.datatypes.Utf8String(txnType),
                    new org.web3j.abi.datatypes.generated.Uint256(createdAt));
            this.userWallet = userWallet;
            this.amount = amount;
            this.debitAccount = debitAccount;
            this.txnType = txnType;
            this.createdAt = createdAt;
        }

        public Transaction(Address userWallet, Uint256 amount, Utf8String debitAccount,
                           Utf8String txnType, Uint256 createdAt) {
            super(userWallet, amount, debitAccount, txnType, createdAt);
            this.userWallet = userWallet.getValue();
            this.amount = amount.getValue();
            this.debitAccount = debitAccount.getValue();
            this.txnType = txnType.getValue();
            this.createdAt = createdAt.getValue();
        }
    }

    public static class User extends DynamicStruct {
        public String name;

        public String userWallet;

        public String email;

        public Boolean isKYCVerified;

        public User(String name, String userWallet, String email, Boolean isKYCVerified) {
            super(new org.web3j.abi.datatypes.Utf8String(name),
                    new org.web3j.abi.datatypes.Address(160, userWallet),
                    new org.web3j.abi.datatypes.Utf8String(email),
                    new org.web3j.abi.datatypes.Bool(isKYCVerified));
            this.name = name;
            this.userWallet = userWallet;
            this.email = email;
            this.isKYCVerified = isKYCVerified;
        }

        public User(Utf8String name, Address userWallet, Utf8String email, Bool isKYCVerified) {
            super(name, userWallet, email, isKYCVerified);
            this.name = name.getValue();
            this.userWallet = userWallet.getValue();
            this.email = email.getValue();
            this.isKYCVerified = isKYCVerified.getValue();
        }
    }

    public static class DepositedEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger amount;

        public String debitAccount;

        public BigInteger createdAt;
    }

    public static class FundsTransferredToBankEventResponse extends BaseEventResponse {
        public String admin;

        public BigInteger amount;

        public BigInteger createdAt;
    }

    public static class UserUpdatedEventResponse extends BaseEventResponse {
        public String user;

        public String name;

        public String email;

        public Boolean isKYCVerified;
    }

    public static class WithdrawnEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger amount;

        public String debitAccount;

        public BigInteger createdAt;
    }
}

